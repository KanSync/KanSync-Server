import "dotenv/config";

import { Client } from 'ts-postgres';
import { IUnifiedIssue } from './common';

const ISSUES_TABLE = 'issues'
const PROJECTS_TABLE = 'projects'
const USERS_TABLE = 'kansync_users'

// This is used to get the column names for the database
const DBIssue: IUnifiedIssue = {
    title: "",
    assignees: [],
    author: { name: "" },
    body: "",
    category: "",
    statusChangeTime: new Date(),
    createdAt: new Date(),
    comments: [""],
    lastEditedAt: new Date(),
    projectID: 2,
    dueDate: new Date(),
    labels: []
};

// This is used to get the column names for the database
const DBColumns = `(${Object.keys(DBIssue).join().toLowerCase()})`

function unifiedIssueToSQL(issue: IUnifiedIssue, projectID: number) {
    issue.projectID = projectID;
    return `(${Object.values(issue).map(value => `'${JSON.stringify(value ?? null)}'`).join(',')})`
}

async function createClient() {
    const client = new Client({
        host: process.env.DATABASE_URL,
        port: Number(process.env.DATABASE_PORT),
        user: process.env.DATABASE_USER,
        password: process.env.DATABASE_PASSWORD,
        database: process.env.DATABASE_NAME
    });
    await client.connect();
    return client
}

export async function initDB() {
    const client = await createClient();

    let drop_tables = `DROP TABLE IF EXISTS ${USERS_TABLE}, ${PROJECTS_TABLE}, ${ISSUES_TABLE}`
    let create_issues_table = `CREATE TABLE ${ISSUES_TABLE} (
        id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
        title text NOT NULL,
        assignees json,
        author json,
        body text,
        category text NOT NULL,
        statuschangetime date,
        createdat date NOT NULL,
        comments json,
        lasteditedat date,
        dueDate date,
        labels json,
        projectid bigint NOT NULL REFERENCES ${PROJECTS_TABLE}(id)
            ON UPDATE CASCADE
            ON DELETE CASCADE
        )`

    let create_projects_table = `CREATE TABLE ${PROJECTS_TABLE} (
        id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
        name text NOT NULL, 
        user_name text NOT NULL REFERENCES ${USERS_TABLE}(login)
            ON UPDATE CASCADE
            ON DELETE CASCADE
        )`

    let create_users_table = `CREATE TABLE ${USERS_TABLE} (login text PRIMARY KEY)`

    try {
        await client.query(drop_tables);
        await client.query(create_users_table);
        await client.query(create_projects_table);
        await client.query(create_issues_table);
    } finally {
        await client.end();
    }
}

export async function getIssuesFromDB(user_name: string, project_name: string): Promise<IUnifiedIssue[]> {
    const client = await createClient();

    let project_id_query = `SELECT id FROM ${PROJECTS_TABLE} WHERE user_name='${user_name}' AND name='${project_name}'`
    let issue_query = `SELECT * FROM ${ISSUES_TABLE} WHERE projectid IN (${project_id_query})`

    let result: IUnifiedIssue[] = []

    try {
        const query_result = client.query<IUnifiedIssue>(
            issue_query
        );

        for await (const row of query_result) {
            result.push(row.reify())
        }
    } finally {
        await client.end();
    }

    return result;
}

export async function storeIssuesToDB(user_name: string, project_name: string, issues: IUnifiedIssue[]) {
    const client = await createClient();

    let project_id_query = `SELECT id FROM ${PROJECTS_TABLE} WHERE user_name='${user_name}' AND name='${project_name}'`
    let delete_query = `DELETE FROM ${PROJECTS_TABLE} WHERE id IN (${project_id_query})`
    let project_query = `INSERT INTO ${PROJECTS_TABLE} (name, user_name) VALUES ('${project_name}', '${user_name}')`
    const issue_query = (id: number) => `INSERT INTO ${ISSUES_TABLE} ${DBColumns} VALUES ${issues.map(issue => unifiedIssueToSQL(issue, id)).join(',')}`;

    let result: IUnifiedIssue[] = []

    // This could break if any part fails, should be transaction
    try {
        await client.query(project_id_query);
        await client.query(delete_query);
        await client.query(project_query);
        let resp = client.query(project_id_query);

        let new_id: number;

        for await (const row of resp) {
            new_id = Number(row.get('id'))
        }

        await client.query(issue_query(new_id))

    } finally {
        await client.end();
    }
}

// TODO: check if user exists in db
export function userExists(user: string): boolean {
    return true
}